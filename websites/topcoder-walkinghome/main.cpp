#include "gtest/gtest.h"

#include <string>
#include <vector>

#include SPECIFIC_HEADER

// Running tests

TEST(TEST_NAME, Statement0)
{
  auto map = std::vector<std::string>{
      "S.||.H"
  };
  ASSERT_EQ(1, fewest_crossings(map));
}
TEST(TEST_NAME, Statement1)
{
  auto map = std::vector<std::string>{
      "S||",
      "||H"
  };
  ASSERT_EQ(-1, fewest_crossings(map));
}
TEST(TEST_NAME, Statement2)
{
  auto map = std::vector<std::string>{
      "S.F",
      ".F.",
      "F.H"
  };
  ASSERT_EQ(-1, fewest_crossings(map));
}
TEST(TEST_NAME, Example0)
{
  auto map = std::vector<std::string>{
      "S.|..",
      "..|.H"
  };
  ASSERT_EQ(1, fewest_crossings(map));
}
TEST(TEST_NAME, Example1)
{
  auto map = std::vector<std::string>{
      "S.|..",
      "..|.H",
      "..|..",
      "....."
  };
  ASSERT_EQ(0, fewest_crossings(map));
}
TEST(TEST_NAME, Example2)
{
  auto map = std::vector<std::string>{
      "S.||...",
      "..||...",
      "..||...",
      "..||..H"
  };
  ASSERT_EQ(1, fewest_crossings(map));
}
TEST(TEST_NAME, Example3)
{
  auto map = std::vector<std::string>{
      "S.....",
      "---*--",
      "...|..",
      "...|.H"
  };
  ASSERT_EQ(1, fewest_crossings(map));
}
TEST(TEST_NAME, Example4)
{
  auto map = std::vector<std::string>{
      "S.F..",
      "..F..",
      "--*--",
      "..|..",
      "..|.H"
  };
  ASSERT_EQ(2, fewest_crossings(map));
}
TEST(TEST_NAME, Example5)
{
  auto map = std::vector<std::string>{
      "H|.|.|.|.|.|.|.|.|.|.|.|.|.",
      "F|F|F|F|F|F|F|F|F|F|F|F|F|-",
      "S|.|.|.|.|.|.|.|.|.|.|.|.|."
  };
  ASSERT_EQ(27, fewest_crossings(map));
}
TEST(TEST_NAME, Example6)
{
  auto map = std::vector<std::string>{
      "S-H"
  };
  ASSERT_EQ(-1, fewest_crossings(map));
}

#ifdef ENABLE_EXTENDED
TEST(TEST_NAME, Extended0)
{
  auto map = std::vector<std::string>{"S|||||||", "--------", "|||.....", "|||.....", "|||....H"};
  ASSERT_EQ(-1, fewest_crossings(map));
}
TEST(TEST_NAME, Extended1)
{
  auto map = std::vector<std::string>{"............|....", "............|....", "...F........|....", "...F........|....", "..FF........|....", "..FF........|....", "..FF........|....", "..F.........|.FFF", "..F.........|...|", "..F.........|...|", "..F.........|...|", "..F.........|...|", "..F.FFFFFFFF|FFF|", "..F.........|...|", "..F.........|...|", "..F.........|....", "..F.........|....", "..F.........|....", "..F.H.......|....", "..F.........|....", "------------*----", "..F.........|....", "..F..S......|....", "............|....", "............|...."};
  ASSERT_EQ(1, fewest_crossings(map));
}
TEST(TEST_NAME, Extended2)
{
  auto map = std::vector<std::string>{"......--------------.", "F|FFFFFFFFFFFFFFFFFFF", ".|...................", ".|............S......", ".|...................", ".|...................", ".|...................", ".|...................", ".|........FFFFFFFFF..", ".|...................", ".|...................", ".|...................", "-*-------------------", ".|...................", ".|..............F.F..", ".|..............F....", ".|..H...........F....", ".|..............F....", ".|..............F....", ".|..............F....", "................F....", ".....................", "....................."};
  ASSERT_EQ(1, fewest_crossings(map));
}
TEST(TEST_NAME, Extended3)
{
  auto map = std::vector<std::string>{"............................|.............", "...................F........|.............", "...................F........|.............", "...................F........|.............", "...................F........|.............", "...................F........|.............", "...................F........|....|........", "...............F...---------*----*----S--.", "...............F............|....|.|.|....", "............................|....|.|.|....", "............................|....|.|.|....", ".....FFFFFFFFFFFFFFFFFFFFF..|....|.|......", "............................|....|.|......", "............................|.H..|.|......", "............................|....|.|......", "............................|......|......", "............................|......|......", "............................|......|......", "----------------------------*------*------", "............................|.............", "................------------*--..........."};
  ASSERT_EQ(1, fewest_crossings(map));
}
TEST(TEST_NAME, Extended4)
{
  auto map = std::vector<std::string>{"|", "|", "|", "*", "|", "|", "|", "|", "|", "|", "|", "S", "|", "|", "|", "|", "H", "|", "|", "|"};
  ASSERT_EQ(-1, fewest_crossings(map));
}
TEST(TEST_NAME, Extended5)
{
  auto map = std::vector<std::string>{".................|.................", ".................|.................", ".................|.................", ".................|.................", ".................|.................", "................-*--------.........", ".................|.................", "................F|.........|.......", "................F|.........|.......", "................F|.........|.......", "................F|H........|.......", "................F|.........|.......", "................F|.........|.......", "........S.......F|.................", "................F|.................", ".................|.................", ".................|................."};
  ASSERT_EQ(1, fewest_crossings(map));
}
TEST(TEST_NAME, Extended6)
{
  auto map = std::vector<std::string>{"...........|......||....", "...........|......||H...", "...........|......||....", "...........|......||....", "...........|......||....", "...........|......||....", "...........|......||....", "...........|......||....", ".....F.....|......||....", ".....F.....|......||....", "|....F.FFFF|FFFFFF||F...", "|....F.....|......||....", "|....F.....|......||....", "|....F.....|......||....", "|....F.....|......||....", "|....F.....|......||....", "|..........|......||....", "|..........|......||....", "|..........|FFFFFF||..F.", "|..........|......||....", "|..........|......||....", "|..........|......||....", "|..........|......||....", "|..........|......||....", "|.FFFFFFFFF|FFFFFF||....", "...........|......|.....", "...........|.S....|.....", "...........|......|.....", "-----------*------*-----"};
  ASSERT_EQ(1, fewest_crossings(map));
}
TEST(TEST_NAME, Extended7)
{
  auto map = std::vector<std::string>{"|....|", "|....|", "|....|", "|...F|", "|---F|", "|...F|", "|...F|", "|...F|", "|...FH", "|....|", "|....|", "|FS..|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|....|", "|----|", "|....|", "|....|", "|....|", "|....|", "*----*", "|....|", "|....|", "|....|", "|....|"};
  ASSERT_EQ(-1, fewest_crossings(map));
}
TEST(TEST_NAME, Extended8)
{
  auto map = std::vector<std::string>{"FFFF..............................................", "..................................................", "..................................................", "..................................................", ".....................................|............", ".....................................|............", ".....................................|............", ".....................................|............", "-------------------------------------*------------", "..............................H......|............", "...................F.................|............", "...................F.................|............", "...................F.................|............", "...................F.................|............", "...................F.................|............", "................|..F.................|............", "................|..F.................|............", "................|..F.................|............", "................|..F.................|............", "................|.-------------------*----........", "................|..F.................|............", "................|..F.................|............", "................|..F.................|............", "...................F.................|............", "...................F.................|............", "...................F.................|............", "...................F.................|............", "...................F.................|............", "...................F.................|............", "...................F.................|............", "...................F..............................", "...................F..............................", "...................F..............................", "...............---------------------------------..", "...................F............S................."};
  ASSERT_EQ(1, fewest_crossings(map));
}
TEST(TEST_NAME, Extended9)
{
  auto map = std::vector<std::string>{"--------*-*-*----*-------*--*--------", "...FFFFF|F|F|FFFFH.......|..|........", ".......F..S......|..F.......|........"};
  ASSERT_EQ(1, fewest_crossings(map));
}
TEST(TEST_NAME, Extended10)
{
  auto map = std::vector<std::string>{"*-SH", "...F"};
  ASSERT_EQ(0, fewest_crossings(map));
}
TEST(TEST_NAME, Extended11)
{
  auto map = std::vector<std::string>{"..F", ".|F", ".|F", "H|F", ".|F", ".|.", "...", "---", "...", "S.."};
  ASSERT_EQ(1, fewest_crossings(map));
}
TEST(TEST_NAME, Extended12)
{
  auto map = std::vector<std::string>{".....|.......|.|........|...............", ".....|.......|.|........|...............", ".....|.......|.|........|...............", "....||.......|.|........|...............", "....||.......|.|........|...............", "....||....|..|.|........|...............", "....||....|..|.|........|...............", "....||....|..|.|........|...............", "....||....|..|.|........|..|............", "....||....|..|.|........|..|............", "....||....|..|.|........|..|............", "....||....|..|.|........|..|............", "....||...F|.||.|........|..|............", "....||...F|.||.|........|..|............", "....||...F|.||.|........|..|..........|.", "....||...F|.||.|........|..|..........|.", "....||...F|.||.|........|..|..........|.", "....||...F|.||.|........|..|..........|.", "....||...F|.||.|........|..|..........|.", "....||...F|F||F|FFFFFFFF|FF|..........|.", "....||...F|.||.|........|..|..........|.", "....||...F|.||.|........|..|..........|.", "....||...F|.||.|........|..|..........|.", "....||...F|.||.|........|.............|.", "....||...F|.||.|........|.............|.", "....|....F|.||.|........|.............|.", ".........F|.||.|........|.............|.", "..........|.||F|FFFFFFFF|.............|.", "..........|.||.|........|.............|.", "..........|.||.|........|.............|.", "..........|.||.|........|.............|.", "..........|.||.|........|.............|.", "..........|.||.|........|.............|.", ".....H....|.||.|........|.............|.", "..........|.||.|........|...............", "..........|.||.|...-----*------------...", ".............|..........|...............", ".............|..........|.....S.........", ".............|..........|..............."};
  ASSERT_EQ(2, fewest_crossings(map));
}
TEST(TEST_NAME, Extended13)
{
  auto map = std::vector<std::string>{".|...................|......|.............", ".|...................|......|.............", ".|...................|......|.............", ".|.............|.....|......|.............", ".|.............|.....|.S....|.............", ".|.............|.....|......|.............", ".|.............|.....|....|.|.............", ".|.------------*-----*----*-*---..........", ".|.............|.....|....|.|.............", ".|..|..........|.....|....|.|.............", ".|..|..........|.....|....|.|...........F.", ".|..|..........|.....|....|.|...........F.", ".|..|..........|.....|....|.|...........F.", ".|..|................|....|.|...........F.", ".|..|................|....|.|.............", ".|..|................|....|.|.............", ".|...................|....|.|.............", ".|...................|....|.|.............", ".|...................|....|.|.............", ".|.....--------------*......|.............", ".|...................|......|.............", ".|...................|......|.............", ".|...................|......|.............", ".|............H......|......|............."};
  ASSERT_EQ(1, fewest_crossings(map));
}
TEST(TEST_NAME, Extended14)
{
  auto map = std::vector<std::string>{"--------------------------...", ".............................", "........................H.|..", "..........................|..", "..FFFFFFFFFFFFFFFFFFFFFFFF|..", "..........F...............|..", "..........F...............|..", "FFFFFFFFFFFFFFFFFFFFFFFF..|..", "..........F...............|..", "..........F...............|..", "..........FS..............|..", "..........F...............|..", "..........F...............|..", "..........F...............|..", "..........F...............|..", "..........................|..", "..........................|..", "..........................|..", "..........................|..", "..........................|..", "..........................|..", "..........................|..", "..........................|..", ".........F................|..", ".........F..FFFFFFFFFFFFFF|..", ".........F................|..", ".........F................|..", ".........F................|..", ".........F................|..", ".........F................|..", ".........F................|..", ".........F................|..", ".........F................|..", ".........F................|..", ".........F................|..", "...FFF...F................|..", ".........F................|..", ".........F...................", ".........F...................", ".........F...................", ".........F...................", ".........F...................", ".........F...................", ".........F...................", ".............................", ".............................", ".............................", "............................."};
  ASSERT_EQ(0, fewest_crossings(map));
}
TEST(TEST_NAME, Extended15)
{
  auto map = std::vector<std::string>{"..............................................", "...................|..........................", "...................|..........................", "...................|..........................", "...................|..........................", "...................|..........................", "...................|..........................", "F..................|..........................", "F..................|...F......................", "F..................|...F......................", "F..................|...F...................|..", "F..................|.FFFFFFFFFFFFFFFFFFFFFF|..", "F.................||...F.........F.........|..", "F..........-------**-----........F.........|..", "F.................||...F.........F.........|..", "F.................||...F.........F.........|..", "F............|....||...F..H......F.........|..", "F............|....||...F.........F.|.......|..", "-------------*----**---------------*-------*..", "..................||.............F.|.......|..", "..................||...............|.......|..", "..................||...............|.......|..", "..................||...............|.......|..", "...................|...............|.......|..", "...................|...............|.......|..", "..................S|...............|.......|..", "-------------------*---------------*----------", "...................|...............|..........", "...................|...............|..........", "...................|...............|..........", "-------------------*---------------*----------", "...................................|..........", "...................................|..........", "...................................|..........", "...................................|..........", "...................................|..........", ".............................................."};
  ASSERT_EQ(2, fewest_crossings(map));
}
TEST(TEST_NAME, Extended16)
{
  auto map = std::vector<std::string>{"....|..........|.", "....|..........|.", "....|..........|.", "....|..........|.", "....|..........|.", "....|..........|.", ".---*---------.|.", "----*----------*-", "....|..........|.", "....|..........||", "....|..........||", "....|..........||", "....|..........||", "....|..........||", "....|.---------*|", "....|F.........||", "....|.....S....||", "....|..........||", "....|..........||", "....|..........||", "F...|..........||", "F...|..........||", "F...|..........||", "F...|..........|.", "F...|..........|.", "F...|..........|.", "F...|..........|.", "F..F|F.........|.", "H...|..........|.", "F...|..........|.", "F...|..........|.", "F...|..........|.", "F...|..........|.", "F...|..........|.", "F...|..........|.", "F...|..........|.", "....|..........|.", "....|..........|.", "....|............", "....|............", "....|............", "....|............", "....|............"};
  ASSERT_EQ(1, fewest_crossings(map));
}
TEST(TEST_NAME, Extended17)
{
  auto map = std::vector<std::string>{"..|..||.|..|.|.|..|.|..............|.......", "..|..||.|..|.|.|..|.|..............|.......", "..|..||.|..|.|.|..|.|..............|.......", "..|..||.|..|.|.||.|.|.............||.......", "..|..||.|..|.|.||.|.|.............||.......", "..|..||.|..|.|.||.|.|.............||.|||...", "..|..||.|..|.|.||.|.|.............||.|||S..", "--*--**-*--*-*-****-*-------------**-***---", "..|..||.|..|.|.||||.|.............||.|||...", "..|..||.|..|.|.||||.|.............||.|||...", "..|..||.|..|.|.||||.|.............||.|||...", "|.|..||.|..|.|.||||.|.............||.|||...", "|.|..||.|..|.|.||||.|.....|...F...||.|||...", "|.|..||.|..|.|.||||.|.....|...F...||.|||...", "|.|..||.|..|.|.||||||..|..|...F...||||||...", "|.|..||.|..|.|.||||||..|..|...F...||||||...", "|.|..||.|..|.|.||||||..|..|...F...||||||...", "|.|..||.|..|.|.||||||..|..|...F...||||||...", "|.|..||.|..|.|.||||||..||.|...F...||||||...", "|.|..||||..|.|.||||||..||.|...F..|||||||...", "|.|..||||..|.|.||||||..||.|...F..|||||||...", "|.|..||||..|.|.||||||..||.|...F..|||||||...", "|.|..||||..|.|.||||||..||.|...F..|||||||...", "|.|..||||..|.|.||||||..||.|...F..|||||||...", "|.|..||||..|.|.||||.|..||.|...F...|||||.F..", "|.|..||||..|.|.||||.|..||.|...F...|||||.F..", "|.|..||||..|.|.||||.|..||.|...F...|||||.F..", "|.|..||||..|.|.||||.|..||.|...F...|||||.F..", "|.|..||||..|.|.||||.|..||.|...F...||||..F..", "|.|..||||..|.|.||||.|...|.|...F...||||..F..", "|.|..||||..|.|.||||.|...|.|...F...||||..F..", "|.|..||||..|.|.||||.|...|.|...F...||||..F..", "|.|..||||..|.|.|.||.|...|.|...F....|||..F..", "|.|..||.|..|.|...||.|...|.|...F....|||H.F..", "|.|..||.|..|.|...||.|...|.|...F....|||..F..", "|.|..||.|..|.|...||.|...|.|...F....|||..F..", "|.|..||.|..|.|...||.|...|.|...F....|||..F..", "|.|..||.|..|.|...||.|...|.|...F....|||.....", "|.|..||.|..|.|...|*-*---*-*...F....|||.....", "..|..||.|..|.|...||.|.........F....|.|.....", "..|..||.|..|.|...||.|.........F....|.|.....", "..|..||.|..|.|....|.|.........F....|.......", "..|..|..|..|.|....|.|.........F....|.......", "..|..|..|..|.|....|.|.........F....|......."};
  ASSERT_EQ(1, fewest_crossings(map));
}
TEST(TEST_NAME, Extended18)
{
  auto map = std::vector<std::string>{"H|S"};
  ASSERT_EQ(1, fewest_crossings(map));
}
TEST(TEST_NAME, Extended19)
{
  auto map = std::vector<std::string>{"|||||||||||||||||||||||||||||||||||||||||||||||||.", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "S||||||||||||||||||||||||||||||||||||||||||||||||.", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||-", "|||||||||||||||||||||||||||||||||||||||||||||||||H"};
  ASSERT_EQ(2, fewest_crossings(map));
}
TEST(TEST_NAME, Extended20)
{
  auto map = std::vector<std::string>{"S|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", "*************************************************-", ".||.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.", "-*************************************************", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||.", ".|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.|.||H"};
  ASSERT_EQ(624, fewest_crossings(map));
}
TEST(TEST_NAME, Extended21)
{
  auto map = std::vector<std::string>{".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", "...S.||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", "-----**----------***--------*-----*--------*------", "-----**----------***--------*-----*--------*------", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", "-----**----------***--------*-----*--------*------", "-----**----------***--------*-----*--------*------", "-----**----------***--------*-----*--------*------", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", "-----**----------***--------*-----*--------*------", ".....||..........|||........|.....|........|......", "-----**----------***--------*-----*--------*------", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", "-----**----------***--------*-----*--------*------", ".....||..........|||........|.....|........|......", ".....||..........|||........|.H...|........|......", ".....||..........|||........|.....|........|......", "-----**----------***--------*-----*--------*------", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......"};
  ASSERT_EQ(8, fewest_crossings(map));
}
TEST(TEST_NAME, Extended22)
{
  auto map = std::vector<std::string>{".....||..........|||........|.....|.......F|......", ".....||..........|||........|.....|.......F|......", ".....||..........|||........|.....|FFFFFF..|...S..", ".....||..........|||........|.....|.......F|......", ".....||..........|||........|.....|........|F.F.F.", "-----**----------***--------*-----*--------*------", ".....||..........|||........|.....|........|.F.F.F", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....*--------*......", ".....||..........|||........|.....*--------*......", ".....||..........|||........|.....|..F.F..........", ".....||..........|||........|.....|.F.H.F.........", ".....||..........|||........|.....|F..............", ".....||..........|||........|.....................", "-----**----------***--------*-----*--------*------", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", "-----**----------***--------*-----*--------*------", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", "-----**----------***--------*-----*--------*------", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......", ".....||..........|||........|.....|........|......"};
  ASSERT_EQ(3, fewest_crossings(map));
}
TEST(TEST_NAME, Extended23)
{
  auto map = std::vector<std::string>{".F-H", "S.|F"};
  ASSERT_EQ(-1, fewest_crossings(map));
}
TEST(TEST_NAME, Extended24)
{
  auto map = std::vector<std::string>{"S..", "--F", "-|.", ".FH"};
  ASSERT_EQ(-1, fewest_crossings(map));
}
TEST(TEST_NAME, Extended25)
{
  auto map = std::vector<std::string>{"S|F", "F-H"};
  ASSERT_EQ(-1, fewest_crossings(map));
}
TEST(TEST_NAME, Extended26)
{
  auto map = std::vector<std::string>{"|...F...F...F...F....||||........-.....|.......|||", "..F...F...F...|.|.F...||....-.-.......||..........", ".S.|||||||||||||||||||||||||||-||||||||||||||||||-", "FFFFFFFFFFFFFFFFFFFFFFFFFFFF-.-...F............F..", "||||||||||||||||||||||||||.|...FFF.............F--", "...................FFFFFFFFFFFFF...............F.|", "...............................................F.|", "...............................................F-.", "...............................................F..", "...............................................F--", "...............................................FF-", "..||||||||||||||||||||||||||||||||||||||||||||||..", "...............................................FFF", "FFFFFFFFFFFFFFF|FF-FFFFFFFFFFFFFFFFFFFFFFFFFFF--..", ".|...|............-................F..............", "..|.|.|..........|.||..F....F..F...F..............", "||||...|.........||||...F..F....F......FFFFFFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF--------------", "...........|||||....................---...........", ".............|.|....................-F-...........", ".............|.|....................---...........", ".............|.|....................-.-...........", "--------------F|....................|.-...........", "FFFFFFFFFFFF-FF|....................-.-...........", "...........|.|F.....................-.-...........", "FF-FFFFFFFFF-FF.....................||.||||.......", "||...|.F....|..FF.....................|....FFFFFFF", ".|||||||||.", "........F.................................-F.H.|..", ".........FFFFFFFFFF.......................-.|||...", ".........F.|-......F......................-..F....", "...........|-.......FFFFFFFFFFFFFFFFFFFFFFFFF...F.", ".........F.|-................F....F.....||||||||.-", ".........F.--.................F...F....F..........", ".........F.-.......FF.......F.....F...F...........", ".-.....--F.||||||||..F.....F....F----F...........-", "....-----F.-..........F......-...F..F............-", ".--------F.-.......................F...........||-"};
  ASSERT_EQ(20, fewest_crossings(map));
}
TEST(TEST_NAME, Extended27)
{
  auto map = std::vector<std::string>{"S.|..", "..|.H", "..|..", "....."};
  ASSERT_EQ(0, fewest_crossings(map));
}
TEST(TEST_NAME, Extended28)
{
  auto map = std::vector<std::string>{"S||-H"};
  ASSERT_EQ(-1, fewest_crossings(map));
}
TEST(TEST_NAME, Extended29)
{
  auto map = std::vector<std::string>{"S|||||H"};
  ASSERT_EQ(1, fewest_crossings(map));
}
TEST(TEST_NAME, Extended30)
{
  auto map = std::vector<std::string>{"S||", "||H"};
  ASSERT_EQ(-1, fewest_crossings(map));
}
TEST(TEST_NAME, Extended31)
{
  auto map = std::vector<std::string>{"S|H", "..."};
  ASSERT_EQ(0, fewest_crossings(map));
}
TEST(TEST_NAME, Extended32)
{
  auto map = std::vector<std::string>{"S.................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", "..................................................", ".................................................H"};
  ASSERT_EQ(0, fewest_crossings(map));
}
TEST(TEST_NAME, Extended33)
{
  auto map = std::vector<std::string>{"|...F...F...F...F....||||........-.....|.......|||", "..F...F...F...|.|.F...||....-.-.......||..........", ".S.|||||||||||||||||||||||||||-||||||||||||||||||-", "FFFFFFFFFFFFFFFFFFFFFFFFFFFF-.-...F............F..", "||||||||||||||||||||||||||.|...FFF.............F--", "...................FFFFFFFFFFFFF...............F.|", "...............................................F.|", "...............................................F-.", "...............................................F..", "...............................................F--", "...............................................FF-", "..||||||||||||||||||||||||||||||||||||||||||||||..", "...............................................FFF", "FFFFFFFFFFFFFFF|FF-FFFFFFFFFFFFFFFFFFFFFFFFFFF--..", ".|...|............-................F..............", "..|.|.|..........|.||..F....F..F...F..............", "||||...|.........||||...F..F....F......FFFFFFFFFFF", "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF--------------", "...........|||||.......FF......|....---...........", ".............|.|...............|....-F-...........", ".............|.|.......FFFFFFF--FFF.---...........", ".............|.|.......F.....F..F...-.-...........", "--------------F|.......F.....F--F.FF|.-...........", "FFFFFFFFFFFF-FF|.......F.....F..F...-.-...........", "...........|.|F........F.....F--FFF.-.-...........", "FF-FFFFFFFFF-FF........F.....F......||.||||.......", "||...|.F....|..FF......F..............|....FFFFFFF", ".|||||||||.", ".||...F.F.................................-F.H.|..", "-.....F..FFFFFFFFFF.......................-.|||...", "......F..F.|-......F......................-..F....", "......F....|-.......FFFFFFFFFFFFFFFFFFFFFFFFF...F.", "......F..F.|-................F....F.....||||||||.-", ".........F.--.................F...F....F..........", ".........F.-.......FF.......F.....F...F...........", ".-.....--F.||||||||..F.....F....F----F...........-", "....-----F.-..........F......-...F..F............-", ".--------F.-.......................F...........||-"};
  ASSERT_EQ(22, fewest_crossings(map));
}
#endif

int main(int argc, char **argv)
{
  ::testing::InitGoogleTest(&argc, argv);
  int ret { RUN_ALL_TESTS() };
  return ret;
}
